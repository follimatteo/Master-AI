% pwp base case

% import for global constraints
include "globals.mzn";

% paper roll dimensions
int: W;
int: H;
set of int: WW = 1..W;
set of int: HH = 1..H;
% number of necessary pieces of paper to cut off
int: n;
set of int: NPIECES = 1..n;


% dimension of each piece of paper
array[NPIECES] of int: dx;
array[NPIECES] of int: dy;

% variables
array[NPIECES, 1..2] of var int: o;

% useful constants
int: x = 1;
int: y = 2;

% origins domain constraints
constraint forall(i in NPIECES)
                    ((o[i,x] > 0 /\ o[i,x] <= W) /\ (o[i,y] > 0 /\ o[i,y] <= H));

% non-overlap constraint
constraint diffn(o[..,x], o[..,y], dx, dy);


% each piece must fit in the paper roll
constraint forall(i in NPIECES)
                  (((dx[i] + o[i,x]-1) <= W) /\ ((dy[i] + o[i,y]-1) <= H));


% implied cumulative constraints
constraint cumulative(o[..,x], dx, dy, H);
constraint cumulative(o[..,y], dy, dx, W);

constraint o[1,x]<= W div 2;
constraint o[1,y]<= H div 2;

%Search:
solve:: int_search(o, first_fail, indomain_split)
     satisfy;
