% pwp base case

% import for global constraints
include "globals.mzn";

% paper roll dimensions
int: W;
int: H;

% number of necessary pieces of paper to cut off
int: n;
set of int: NPIECES = 1..n;

% dimension of each piece of paper
array[NPIECES] of int: dx;
array[NPIECES] of int: dy;

% variables
array[NPIECES, NPIECES] of var int: o;

% useful constants
int: x = 1;
int: y = 2;


% origins domain constraints
constraint forall(i in NPIECES)
                    ((o[i,x] > 0 /\ o[i,x] <= W) /\ (o[i,y] > 0 /\ o[i,y] <= H));

% non-overlap constraint
constraint diffn(o[..,x],o[..,y], dx, dy);


% each piece must fit in the paper roll
constraint forall(i in NPIECES)
                  (((dx[i] + o[i,x]-1) <= W) /\ ((dy[i] + o[i,y]-1) <= H));


% implied cumulative constraints
constraint cumulative(o[..,x], dx, dy, H);
constraint cumulative(o[..,y], dy, dx, W);

constraint
  let {
    array[1..W,1..H] of var 1..n: box;
    } in forall(xx in 1..W, yy in 1..H, i in NPIECES)(box[xx,yy]==i <-> (o[i,x]<=xx /\ xx<o[i,x]+dx[i] /\ o[i,y]<=yy /\ yy<o[i,y]+dy[i]))
          /\  lex_lesseq(array1d(box), [box[i_,j_] | i_ in reverse(1..W), j_ in 1..H])
          /\  lex_lesseq(array1d(box), [box[i_,j_] | i_ in 1..W, j_ in reverse(1..H)]);


% search
ann:search_ann;
search_ann = int_search(o, first_fail, indomain_split);
%search_ann = int_search(o, dom_w_deg, indomain_split);
%search_ann = int_search(o, most_constrained, indomain_split);
solve :: search_ann satisfy;
